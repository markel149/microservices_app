version: '3.1'
# Los puertos se pueden dejar de publicar si tenemos el haproxy, porque se ven todos desde la misma red del compos
# Solo hay que dejar los puertos expuestos en haproxy
services:
  order:
    container_name: order
    build: ./order
    volumes:
      - ./order:/app
    environment:
      GUNICORN_PORT: '${GUNICORN_PORT}'
      SQLALCHEMY_DATABASE_URI: '${SQLALCHEMY_SQLITE_DATABASE_URI_ORDER}'
      SQLALCHEMY_TRACK_MODIFICATIONS: '${SQLALCHEMY_TRACK_MODIFICATIONS}'
      SERVICE_NAME: 'order'
      SERVICE_ID: 'order_id'
      CONSUL_HOST: '${CONSUL_HOST}'
      IP: '${ORDER_IP}'
      PORT: 8000
    restart: always
    depends_on:
      - rabbitmq
      - auth
      - fluentd
      - elastic
    networks:
      service_discovery_network:
        ipv4_address: '${ORDER_IP}'
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  auth:
    container_name: auth
    build: ./auth
    volumes:
      - ./auth:/app
    environment:
      GUNICORN_PORT: '${GUNICORN_PORT}'
      SQLALCHEMY_DATABASE_URI: '${SQLALCHEMY_SQLITE_DATABASE_URI_CLIENT}'
      SQLALCHEMY_TRACK_MODIFICATIONS: '${SQLALCHEMY_TRACK_MODIFICATIONS}'
      SERVICE_NAME: 'client'
      SERVICE_ID: 'auth_id'
      CONSUL_HOST: '${CONSUL_HOST}'
      IP: '${AUTH_IP}'
      PORT: 8000
    depends_on:
      - rabbitmq
      - fluentd
      - elastic
    restart: always
    networks:
      service_discovery_network:
        ipv4_address: '${AUTH_IP}'
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  payment:
    container_name: payment
    build: ./payment
    volumes:
      - ./payment:/app
    environment:
      GUNICORN_PORT: '${GUNICORN_PORT}'
      SQLALCHEMY_DATABASE_URI: '${SQLALCHEMY_SQLITE_DATABASE_URI_PAYMENT}'
      SQLALCHEMY_TRACK_MODIFICATIONS: '${SQLALCHEMY_TRACK_MODIFICATIONS}'
      SERVICE_NAME: 'payment'
      SERVICE_ID: 'payment_id'
      CONSUL_HOST: '${CONSUL_HOST}'
      IP: '${PAYMENT_IP}'
      PORT: 8000
    restart: always
    depends_on:
      - rabbitmq
      - auth
      - fluentd
      - elastic
    networks:
      service_discovery_network:
        ipv4_address: '${PAYMENT_IP}'
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  haproxy:
    container_name: haproxy
    image: haproxy:latest
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./haproxy/aas.crt:/usr/local/etc/haproxy/aas.crt
    ports:
      - '${HA_PROXY_PORT}:${HA_PROXY_PORT}'
      - '${HA_PROXY_STATS_PORT}:${HA_PROXY_STATS_PORT}'
      - '${HA_PROXY_TLS_PORT}:${HA_PROXY_TLS_PORT}'
    environment:
      HA_PROXY_STATS_PORT: '${HA_PROXY_STATS_PORT}'
      HA_PROXY_PORT: '${HA_PROXY_PORT}'
      HA_PROXY_TLS_PORT: '${HA_PROXY_TLS_PORT}'
      CONSUL_HOST: '${CONSUL_HOST}'
    restart: always
    depends_on:
      - order
      - payment
      - delivery
      - rabbitmq
      - machine
      - logger
      - auth
      - fluentd
      - elastic
    networks:
      service_discovery_network:
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  machine:
    container_name: machine
    build: ./machine
    volumes: 
      - ./machine:/app
    environment:
      GUNICORN_PORT: '${GUNICORN_PORT}'
      SQLALCHEMY_DATABASE_URI: '${SQLALCHEMY_SQLITE_DATABASE_URI_MACHINE}'
      SQLALCHEMY_TRACK_MODIFICATIONS: '${SQLALCHEMY_TRACK_MODIFICATIONS}'
      SERVICE_NAME: 'machine'
      SERVICE_ID: 'machine_id'
      CONSUL_HOST: '${CONSUL_HOST}'
      IP: '${MACHINE_IP}'
      PORT: 8000
    restart: always
    depends_on:
      - rabbitmq
      - fluentd
      - elastic
    networks:
      service_discovery_network:
        ipv4_address: '${MACHINE_IP}'
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  delivery:
    container_name: delivery
    build: ./delivery
    volumes: 
      - ./delivery:/app
    environment:
      GUNICORN_PORT: '${GUNICORN_PORT}'
      SQLALCHEMY_DATABASE_URI: '${SQLALCHEMY_SQLITE_DATABASE_URI_DELIVERY}'
      SQLALCHEMY_TRACK_MODIFICATIONS: '${SQLALCHEMY_TRACK_MODIFICATIONS}'
      SERVICE_NAME: 'delivery'
      SERVICE_ID: 'delivery_id'
      CONSUL_HOST: '${CONSUL_HOST}'
      IP: '${DELIVERY_IP}'
      PORT: 8000
    restart: always
    depends_on:
      - rabbitmq
      - fluentd
      - elastic
    networks:
      service_discovery_network:
        ipv4_address: '${DELIVERY_IP}'
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    volumes:
      - ./rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/certs/:/etc/rabbitmq/certs/
    ports:
      - 5671:5671
      - 15671:15671
      - 15691:15691
      - 15672:15672
      - 5672:5672
    depends_on:  
      # - fluentd
      - elastic
    networks:
      service_discovery_network:
    # logging:
    #   driver: fluentd
    #   options:
    #     fluentd-address: localhost:${FLUENTD_PORT}
    #     tag: 'application.{{.Name}}'

  logger:
    container_name: logger
    build: ./logger
    volumes:
      - ./logger:/app
    environment:
      GUNICORN_PORT: '${GUNICORN_PORT}'
      SQLALCHEMY_DATABASE_URI: '${SQLALCHEMY_SQLITE_DATABASE_URI_LOGGER}'
      SQLALCHEMY_TRACK_MODIFICATIONS: '${SQLALCHEMY_TRACK_MODIFICATIONS}'
      SERVICE_NAME: 'logger'
      SERVICE_ID: 'logger_id'
      CONSUL_HOST: '${CONSUL_HOST}'
      IP: '${LOGGER_IP}'
      PORT: 8000
    restart: always
    depends_on:
      - rabbitmq
      - fluentd
      - elastic
    networks:
      service_discovery_network:
        ipv4_address: '${LOGGER_IP}'
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  consul:
    container_name: consul
    image: consul
    environment:
      - CONSUL_LOCAL_CONFIG=${CONSUL_LOCAL_CONFIG}
    volumes:
      - ./consul/data:/consul/data
      - ./consul/config:/consul/config
    ports:
      - ${CONSUL_HTTP_PORT}:${CONSUL_HTTP_PORT}
      - ${CONSUL_HTTPS_PORT}:${CONSUL_HTTPS_PORT}
      - ${CONSUL_UDP_PORT}:${CONSUL_UDP_PORT}/udp
    command: consul agent -server -ui -client=0.0.0.0 -bootstrap-expect=1 -data-dir /consul/data -config-dir /consul/config
    depends_on:
      - fluentd
      - elastic
    networks:
      service_discovery_network:
        ipv4_address: '${CONSUL_HOST}'
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  elastic:
    container_name: elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    ports:
      - ${ES_HTTP_PORT}:${ES_HTTP_PORT}
      - ${ES_TRANSPORT_PORT}:${ES_TRANSPORT_PORT}
    volumes:
      - ./elastic/data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
    networks:
      service_discovery_network:

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    environment:
      - network.host=0.0.0.0
      - ELASTICSEARCH_HOSTS=http://elastic:${ES_HTTP_PORT}
    depends_on:
      - elastic
      - fluentd
    networks:
      service_discovery_network:
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:${FLUENTD_PORT}
        tag: 'application.{{.Name}}'

  fluentd:
    container_name: fluentd
    build: ./fluentd
    ports:
      - ${FLUENTD_PORT}:${FLUENTD_PORT}
    volumes:
      - ./fluentd/:/fluentd/etc/
    depends_on:
      - elastic
    networks:
      service_discovery_network:

networks:
  service_discovery_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: '${NETWORK_SUBNET}'
